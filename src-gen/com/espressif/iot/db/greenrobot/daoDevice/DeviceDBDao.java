package com.espressif.iot.db.greenrobot.daoDevice;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.espressif.iot.db.greenrobot.daoDevice.DeviceDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DEVICE_DB.
*/
public class DeviceDBDao extends AbstractDao<DeviceDB, Long> {

    public static final String TABLENAME = "DEVICE_DB";

    /**
     * Properties of entity DeviceDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Bssid = new Property(1, String.class, "bssid", false, "BSSID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Status = new Property(3, String.class, "status", false, "STATUS");
    };


    public DeviceDBDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DEVICE_DB' (" + //
                "'ID' INTEGER PRIMARY KEY ASC ," + // 0: id
                "'BSSID' TEXT NOT NULL UNIQUE ," + // 1: bssid
                "'TYPE' TEXT NOT NULL ," + // 2: type
                "'STATUS' TEXT NOT NULL );"); // 3: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DEVICE_DB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DeviceDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBssid());
        stmt.bindString(3, entity.getType());
        stmt.bindString(4, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DeviceDB readEntity(Cursor cursor, int offset) {
        DeviceDB entity = new DeviceDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // bssid
            cursor.getString(offset + 2), // type
            cursor.getString(offset + 3) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DeviceDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBssid(cursor.getString(offset + 1));
        entity.setType(cursor.getString(offset + 2));
        entity.setStatus(cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DeviceDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DeviceDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
